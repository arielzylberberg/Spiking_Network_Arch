#ifndef NEURON_H_
#define NEURON_H_

#include <cstdlib>

#include "constants.h"
#include "Synapse.h"
#include "SynapseBase.h"
#include "Synapse_STP.h"
#include "Synapse_STD.h"
#include "Synapse_STF.h"
#include "Synapse_STD_STF.h"
#include "SynapseNMDA_STD.h"
#include "SynapseNMDA_STF.h"
#include "SynapseNMDA_STD_STF.h"

using namespace std;

#pragma pack(push,1)

/** This class represents a unique neuron. This neuron may have axonals connected to other neurons.*/
class Neuron
{
public:
	/** Neuron constructor. Variables are resetted to 0 and no axonals are created. This is done by the network calling the loadAxonals() funtion. */
	Neuron();
	/** Neuron destructor. If axonals were created, we destroy them. */
	~Neuron();

	/** Number of axonals created. */
	int Naxonals;    // axonal tree (total number of synapses on the axon)
	/** Axonal pointers array. Size of Naxonals. */
	Synapse **Axonals;

	/** External gaussian inputs for each receptor (to be added to S at each time step). */
	float ExtS[MAX_RECEPTORS]; // nS (2)
	
	/** Mean external input to the cell */
	float ExtMuS[MAX_RECEPTORS];
	/** Dev of the external input to the cell */
	float ExtSigmaS[MAX_RECEPTORS];

	float FreqExt[MAX_RECEPTORS];

	// dynamic variables

	/** Potential, in volts. This is THE dynamic variable, updates in each time step. */
	float V; // Variable dinamica, se actualiza celula por celula (4)
	/** Refractory state counter. Used for the exponential decay. */
	int RefrState; // Refractory state counter (4)

	// the times of the last two spikes
	/** Time of the last spike emitted. Used for NMDA saturation. */
	float TimeLastSpike; // time of the last emitted spike (for NMDA saturation) (4)
	/** Time of the previous spike emitted. Also, used for NMDA saturation. */
	float PTimeLastSpike; //(4)
	  
	/** Calcium concentracion in the neuron. */
	float CA; //concentracion de calcio.
	/** Total conductance for internal inputs (spikes generated by the network). */
	float LS[MAX_RECEPTORS]; // Variable dinamica por receptor (2)

	/** This function creates the synapse pointer array and loads the corresponding structures. \param connId is the array that identifies the connection characteristics for each axonal. \param tNeuron refers to the target neuron of the synapse. \param stfcode is a boolean value indicating if STF is enabled for each synapse. \param stdcode is a boolean value indicating if STD is enabled for each synapse. \param initLastCond is the initial conductance for each synapse. \return Returns an int with a error code or success. */
	int loadAxonals(const short connId[], const short tNeuron[], const float tEfficacyMod[], const char stpcode[], const char stfcode[],const char stdcode[], const float initLastCond[]);

	/** This function resets the neuron parameters after a spike is emitted. \param Time is used for setting the TimeLastSpike variable. \param ResetPot is the reset potential \param refrState is the counter used for the refractory state. */
	void resetAfterSpike(const float Time, const float ResetPot, const int refrState);

	/** Function used for debugging application. It tries to estimate the amount of memory needed. It sub-estimates a lot, so don't trust it. \return Returns a long with the estimated memory needed in bytes. */
	long calculateMemory();
private:
};

#pragma pack(pop)

#endif /*NEURON_H_*/
